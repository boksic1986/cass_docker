#!/usr/bin/perl -w
use strict;
use SVG;
use Cwd qw/abs_path/;
use File::Basename;
use Statistics::Basic qw (:all);
use Getopt::Long;
#use lib '/home/lixuchao';
#use talmud qw/GetOptions Open GetOptions Transfer abs_path basename/;

my ($soft,$version,$date,$email) = (basename($0),"7.0","2017-8-1","lixuchao\@genomics.org.cn");

my $usage = "
Discription:

	$soft -- This Program is to draw the figure of CNV result that generated by PSCC/SegSeq.

History

	Author:Li Xuchao,Zhang Chunlei
	Version:$version    Date:$date

Usage: 

	perl $soft [Options | help?] -i <input.file> -o <output.file [.svg]>

	-m        FLOAT  lower threshold of deletionn using in the non gradient colors mode [0.75]
	-x        FLOAT  upper threshold of duplication, using in the non gradient colors mode [1.25]
	-st       FLOAT  the threshold of Self-Test p-value [None]
	-pt       FLOAT  the threshold of Population-Test p-value [None]
	-lt       CHR    the threshold of CNV length [None]

	-gender   CHR    gender information [M]
	-col      INT    the colunme number of ratio [4]
	-path     FLAG   flag of the sample directory [False]
	-convert  FLAG   convert the figure format [png]
	-gradual  FLAG   flag of gradient colors [False]
	-autosome FLAG   draw the autosomes only [False]

	-width    INT    width of each chromosome [20]
	-length   INT    length of each chromosome [750]
	-distance INT    distance between chromosomes [50]
	-ruler    INT    number of ruler you want [1]
	-tick     INT    the major tick scale [20]
	-sample   INT    the font size of sample name [25]

Example

	perl $soft -i ./Example.raw.cnv -o Example.svg
	perl $soft -i ./Example.raw.cnv -o Example.svg -d 55 -w 25 -p -gradual
	perl $soft -i ./Example.raw.cnv -o Example.svg -r 4 -auto -sample 35 -hg19 -col 5
	perl $soft -i ./Example.raw.cnv -o Example.svg -r 0 -t 15 -nog -m 0.7 -x 1.3 -sp 1e-3 -pp 1e-3 -lt 500k
";

my ($in,$out,$sp_thres,$pp_thres,$len_thres,$path,$autosome,$convert,$N_region,$help);
my ($col,$fa,$fb) = (4,0.75,1.25);
my ($gender,$gradual) = ("M",0);
my ($ruler_width,$distance,$chr_length,$chr_width,$margin) = (35,50,750,20,12);
my $ruler = 1;
my $tick = 20;
my $sample_size = 28;

GetOptions(
	'in=s'       => \$in,
	'out=s'      => \$out,
	'help|?'     => \$help,

	'm=f'        => \$fa,
	'x=f'        => \$fb,
	'gender=s'   => \$gender,
	'col=i'      => \$col,
	'st=s'       => \$sp_thres,
	'pt=s'       => \$pp_thres,
	'lt=s'       => \$len_thres,
	'gradual!'   => \$gradual,
	'autosome'   => \$autosome,
	'convert:s'  => \$convert,

	'path'       => \$path,
	'sample=i'   => \$sample_size,
	'width=i'    => \$chr_width,
	'length=i'   => \$chr_length,
	'distance=i' => \$distance,
	'ruler=i'    => \$ruler,
	'tick=i'     => \$tick,
) or die $usage;

die "$usage\n" unless (!$help && $in && $out && $out =~ /\.svg$/);

$in  = abs_path($in);
$out = abs_path($out);

my $sample = basename($out);
$sample = $1 if($sample =~ /(.+)\.cnv.*/);
#$sample = $1 if($sample =~ /(.+?)\..*/);

#读取CNV信息
my (%cnv,%n_region,$num);

open IN,"<$in";
while(<IN>){
	chomp;
	next unless /^\d+/;
	my ($chr,$start,$end,$cr,$sp,$pp) = (split)[0,1,2,$col-1,-1,$col+1];
	$cr = ($cr >= $fb) ? 1.5 : ($cr > $fa) ? 1: 0.5 unless $gradual;
	next if $cr == 1;
	if(defined $sp && defined $sp_thres){
		next if $sp > $sp_thres;
		next if (defined $pp && defined $pp_thres && $pp > $pp_thres);
	}
	if(defined $len_thres){
#		$len_thres = Transfer($len_thres,2,1000,'');
		next if $end - $start + 1 < $len_thres;
	}
	$num ++;
	$cnv{$chr}{$num}[0] = $start;
	$cnv{$chr}{$num}[1] = $end;
	$cnv{$chr}{$num}[2] = $cr;
}
close IN;

#染色体及N区信息读取
#$N_region ||= ($hg19 ? '/ifs1/ST_REHEAL/USER/PUBLIC_database/database/Homo_sapiens/HG19_noRandom/N_region/N_region' :
#$N_region = "/soft/pipeline/cbNIPT_pipeline/Codes/N_region_hg19";
$N_region = "/home/CASS/N_region_hg19";
#					   '/ifs1/ST_REHEAL/USER/PUBLIC_database/database/Homo_sapiens/HG18_noRandom/N_region/N_region');
#my @chr = $hg19 ? (249250621,243199373,198022430,191154276,180915260,171115067,159138663,146364022,141213431,135534747,135006516,133851895,115169878,107349540,102531392,90354753,81195210,78077248,59128983,63025520,48129895,51304566,155270560,59373566) :
my @chr = (249250621,243199373,198022430,191154276,180915260,171115067,159138663,146364022,141213431,135534747,135006516,133851895,115169878,107349540,102531392,90354753,81195210,78077248,59128983,63025520,48129895,51304566,155270560,59373566);
#				  (247249719,242951149,199501827,191273063,180857866,170899992,158821424,146274826,140273252,135374737,134452384,132349534,114142980,106368585,100338915,88827254,78774742,76117153,63811651,62435964,46944323,49691432,154913754,57772954);
my @centromere  = (123035434,93826171,92004854,51160117,47905641,60330166,59554331,45338887,48867679,40754935,53144205,36356694,17500000,17500000,18500000,36835801,23763006,16960898,26181782,27869569,12788129,14500000,60132012,11604553);

#my $NG = Open($N_region);
open NG,"<$N_region";
while(<NG>){
	chomp;
	my ($chr,$start,$end) = split;
	$chr =~ s/chr//;
	$chr = ($chr eq "X") ? 23 : ($chr eq "Y") ? 24 : $chr;
	$n_region{$chr}{$start} = $end;
}
close NG;

#计算染色体排列方式
my $devide_num = 16;
$ruler = 1 if $ruler >= $devide_num;
$ruler = 0 if $distance < 40;

#设置图片长度、染色体个数等信息
my (@chr_draw,$fig_width);
if($autosome){
	$fig_width = $ruler_width + $margin*2 + $distance * ($devide_num-2) + $chr_width * ($devide_num-1);
	@chr_draw  = (1 .. 22);
}else{
	$fig_width = $ruler_width + $margin*2 + $distance * ($devide_num-1) + $chr_width * $devide_num;
	@chr_draw  = $gender eq "F" ? (1 .. 23) : (1 .. 24);
}
#$chr_length  ||= $fig_width * 0.75 - 100;
my $fig_height = $chr_length + 100;
my $rate       = $chr[0] / $chr_length;

#标注颜色设置
my $chr_color      = "rgb(64,0,128)";
my $sample_color   = "black";
my $my_info_color  = "rgb(64,0,128)";
my $ruler_color    = "black";
my $fig_info_color = "rgb(64,0,128)";
my $n_region_color = "rgb(180,180,180)";

#字体设置
my $text_font      = "Arial";
my $chr_size       = 14;
my $tick_size      = 10;
my $my_info_size   = 14;
my $fig_info_size  = 14;

#计算刻度间隔
my $tick_vice = ($tick <= 10) ? ($tick / 5) : ($tick / 10);

#开始画图
my $precision = 3;
open SVG,">$out" or die "Cann't open output file $out\n";
print SVG SVG_new($fig_width,$fig_height);

foreach my $chr(@chr_draw){
	my ($x,$y);

#计算初始位置
	if($chr == 23 || $chr == 24){
		$x = $ruler_width + $margin + $distance*($devide_num-1) + $chr_width*($devide_num-1);
	}elsif($chr <= $devide_num-1){
		$x = $ruler_width + $margin + $distance*($chr-1) + $chr_width*($chr-1);
	}else{
		$x = $ruler_width + $margin + $distance*($chr-($devide_num-12)*2) + $chr_width*($chr-($devide_num-12)*2);
	}
	if($chr <= $devide_num-1 || $chr == 23){
		$y = 35;
	}else{
		$y = int($chr_length*0.74);
	}

#画标尺
	if($ruler == 0){
		draw_ruler($chr,$x,$y) if ($chr == 1 || $chr == $devide_num);
	}elsif($ruler == 1){
		draw_ruler($chr,$x,$y);
	}else{
		draw_ruler($chr,$x,$y) if (($chr < $devide_num && ($chr)%($ruler) == 1) || ($chr >= $devide_num && ($chr-$devide_num+1)%($ruler) == 1));
	}
			
#写染色体编号
	my $chr_name = ($chr == 23) ? 'X' : ($chr == 24) ? 'Y' : $chr;
	print SVG SVG_text($x+$chr_width/2,$y-$chr_width/2,$chr_color,$text_font,$chr_size,"Chr$chr_name","middle");

#画CNV条带
	if(exists $cnv{$chr}){
		foreach my $cnv(sort {$a <=> $b} keys %{$cnv{$chr}}){
			my $start = $cnv{$chr}{$cnv}[0];
			my $end   = $cnv{$chr}{$cnv}[1];
			my $cr    = $cnv{$chr}{$cnv}[2];
			my $color = color($cr);
			print SVG SVG_rect($x,$start/$rate+$y,$chr_width,($end-$start+1)/$rate,$color,0);
		}
	}

#画N区条带
	if(exists $n_region{$chr}){
		foreach my $n_start(sort {$a <=> $b} keys %{$n_region{$chr}}){
			print SVG SVG_rect($x,$y+$n_start/$rate,$chr_width,($n_region{$chr}{$n_start}-$n_start)/$rate,$n_region_color,0,1);
		}
	}

#画染色体轮廓
	print SVG SVG_rect($x,$y,$chr_width,($centromere[$chr-1]-$y+1)/$rate,"black",0,0.15,$chr_width/3,$chr_width/3);
	print SVG SVG_rect($x,($centromere[$chr-1])/$rate+$y,$chr_width,($chr[$chr-1]-$centromere[$chr-1]+1)/$rate,"black",0,0.15,$chr_width/3,$chr_width/3);

#染色体圆角化
	draw_corner($x,$y,$chr);
}

#画图例信息
if($gradual){
	my $step = 511;
	my $info_length  = 80;
	my $info_width   = 12;
	my $info_x_left  = $ruler_width + $margin + $distance*4 + $chr_width*4.5;
	my $info_x_right = $info_x_left + $info_length;
	my $info_y       = 100 + $chr_length*0.8;

	print SVG SVG_rect($info_x_left,$info_y+46,$info_width,$info_width,$n_region_color,0);
	print SVG SVG_rect($info_x_left,$info_y+46,$info_width,$info_width,"black",0,0.15);
	print SVG SVG_text($info_x_left+$info_length,$info_y+56,$fig_info_color,$text_font,$fig_info_size,"N-Region","end");
	print SVG SVG_text($info_x_left+$info_length/2,$info_y+$info_width+16,$fig_info_color,$text_font,$fig_info_size,"Copy-Ratio","middle");

	foreach(0 .. 255){
		my $color1 = 'rgb(255,'.$_.','.$_.')';
		my $color2 = 'rgb('.$_.',255,'.$_.')';
		if($_ == 0){
			print SVG SVG_text($info_x_left-4,$info_y-6,$fig_info_color,$text_font,$fig_info_size,0.5);
			print SVG SVG_text($info_x_right-11,$info_y-6,$fig_info_color,$text_font,$fig_info_size,1.5);
		}
		if($_ == 255){
			print SVG SVG_text($info_x_left-2,$info_y-6,$fig_info_color,$text_font,$fig_info_size,1);
		}
		print SVG SVG_rect($info_x_left,$info_y,$info_length/$step,$info_width,$color1,0);
		$info_x_left  += $info_length/$step;
		print SVG SVG_rect($info_x_right,$info_y,$info_length/$step,$info_width,$color2,0);
		$info_x_right -= $info_length/$step;
	}
	print SVG SVG_rect($info_x_left-$info_length/2,$info_y,$info_length,$info_width,"black",0,0.15);
}else{
	my $info_x = $ruler_width + $margin + $distance*4 + $chr_width*4.5;
	my $info_y = 100 + $chr_length*0.8;
	my $info_width  = 12;
	my $info_height = 50;

	print SVG SVG_rect($info_x,$info_y,$info_width,$info_width,color(1.5),0);
	print SVG SVG_rect($info_x,$info_y,$info_width,$info_width,"black",0,0.15);
	print SVG SVG_text($info_x+$info_width*2,$info_y+$info_width-($info_width-$fig_info_size*3/5)/2,$fig_info_color,$text_font,$fig_info_size,"Duplication","start");
	print SVG SVG_rect($info_x,$info_y+$info_height/2,$info_width,$info_width,color(0.5),0);
	print SVG SVG_rect($info_x,$info_y+$info_height/2,$info_width,$info_width,"black",0,0.15);
	print SVG SVG_text($info_x+$info_width*2,$info_y+$info_height/2+$info_width-($info_width-$fig_info_size*3/5)/2,$fig_info_color,$text_font,$fig_info_size,"Deletion","start");
	print SVG SVG_rect($info_x,$info_y+$info_height,$info_width,$info_width,$n_region_color,0);
	print SVG SVG_rect($info_x,$info_y+$info_height,$info_width,$info_width,"black",0,0.15);
	print SVG SVG_text($info_x+$info_width*2,$info_y+$info_height+$info_width-($info_width-$fig_info_size*3/5)/2,$fig_info_color,$text_font,$fig_info_size,"N-Region","start");
}

#标注样品信息
if($path){
	print SVG SVG_text($margin,$fig_height-$sample_size-$margin,$sample_color,$text_font,$sample_size,"Sample:$sample");
	print SVG SVG_text($margin,$fig_height-$margin,$sample_color,$text_font,$sample_size,"Path:$in");
}else{
	print SVG SVG_text($margin,$fig_height-$margin,$sample_color,$text_font,$sample_size,"Sample:$sample");
}

#标注个人信息
print SVG SVG_text($fig_width-$margin,$fig_height-$margin,$my_info_color,$text_font,$my_info_size,"$soft v$version","end");
#print SVG SVG_text($fig_width-$margin,$fig_height-$margin-$my_info_size*1.5,$my_info_color,$text_font,$my_info_size,"$soft v$version","end");
#print SVG SVG_text($fig_width-$margin,$fig_height-$margin,$my_info_color,$text_font,$my_info_size,$email,"end");

#输出SVG
print SVG SVG_end();
close SVG;

#格式转换
if(defined $convert){
	$convert ||= 'png';
	(my $bitmap = $out) =~ s/\.svg$/\.$convert/;
	`convert $out $bitmap`;
}

########################### Subroutine ###########################

sub color{
	return ($_[0] <= 0.5) ? "rgb(255,0,0)" :
		   ($_[0] < 1)    ? 'rgb(255,' . int($_[0]*510-255) . ',' . int($_[0]*510-255) . ')' :
#		   ($_[0] < 1)    ? 'rgb(' . int($cr*510-255) . ',' . int($cr*510-255) . ',255)' :							蓝色渐变
		   ($_[0] == 1)   ? "rgb(255,255,255)" :
		   ($_[0] < 1.5)  ? 'rgb(' . int((1.5-$_[0])*510) . ',255,' . int((1.5-$_[0])*510) . ')' :
#		   ($_[0] < 1.5)  ? 'rgb(255,' . int((1.5-$_[0])*510) . ',' . int((1.5-$_[0])*510) . ')' :						红色渐变
		   "rgb(0,255,0)";
}

sub SVG_new{
	my ($width,$height) = @_;
	return "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<svg height=\"$height\" width=\"$width\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n";
#	return $header;
}

sub SVG_end{
	return "\t<!-- Generated by Talmud.K <talmud.k\@gmail.com> -->\n</svg>\n";
}

sub SVG_rect{
	my ($x,$y,$width,$height,$fill,$stroke_width,$opacity,$rx,$ry) = @_;
	$rx ||= 0;
	$ry ||= 0;
	$opacity ||= 1;

	$x = decimal($x,$precision);
	$y = decimal($y,$precision);
	$width  = decimal($width, $precision);
	$height = decimal($height,$precision);
	return "\t<rect fill=\"$fill\" fill-opacity=\"$opacity\" height=\"$height\" rx=\"$rx\" ry=\"$ry\" stroke-width=\"$stroke_width\" width=\"$width\" x=\"$x\" y=\"$y\" />\n";
}

sub SVG_text{
	my ($x,$y,$fill,$font,$size,$text,$anchor) = @_;
	$anchor ||= "start";
	$x = decimal($x,$precision);
	$y = decimal($y,$precision);
	return "\t<text fill=\"$fill\" font=\"$font\" font-size=\"$size\" text-anchor=\"$anchor\" x=\"$x\" y=\"$y\">$text</text>\n";
}

sub draw_ruler{
	my ($chr,$x,$y) = @_;
	print SVG SVG_line($x-$chr_width/3,$y,$x-$chr_width/3,$chr[$chr-1]/$rate+$y,$ruler_color,0.5,0.85);
	for(my $i = 0; $i <= $chr[$chr-1]/10**6; $i += $tick_vice){
		print SVG SVG_line($x-$chr_width/3-2,$y+$i*10**6/$rate,$x-$chr_width/3,$y+$i*10**6/$rate,$ruler_color,0.3,0.8,);
	}
	for(my $i = 0; $i <= $chr[$chr-1]/10**6; $i += $tick){
		print SVG SVG_line($x-$chr_width/3-3,$y+$i*10**6/$rate,$x-$chr_width/3,$y+$i*10**6/$rate,$ruler_color,0.5,0.8,);
		print SVG SVG_text($x-$chr_width/3-10,$y+$i*10**6/$rate+2.25,$ruler_color,$text_font,$tick_size,$i,"end");
	}
}

sub SVG_line{
	my ($x1,$y1,$x2,$y2,$fill,$stroke_width,$opacity) = @_;
	$x1 = decimal($x1,$precision);
	$x2 = decimal($x2,$precision);
	$y1 = decimal($y1,$precision);
	$y2 = decimal($y2,$precision);
	return "\t<line stroke=\"$fill\" stroke-opacity=\"$opacity\" stroke-width=\"$stroke_width\" x1=\"$x1\" x2=\"$x2\" y1=\"$y1\" y2=\"$y2\" />\n";
}

sub draw_corner{
	my ($x,$y,$chr) = @_;
	my $r = decimal($chr_width/3,$precision);

##画6(8)个多边形
	my $x1 = decimal($x,$precision);
	my $x2 = decimal($x+$chr_width,$precision);

	my $y1 = decimal($y,$precision);
	my $y2 = decimal($y+$centromere[$chr-1]/$rate,$precision);
	my $y3 = decimal($y+$chr[$chr-1]/$rate,$precision);

###上左
	print SVG "\t<path d=\"M$x1,$y1 v$r a$r,$r 0 0 1 $r,-$r z\" fill=\"white\" stroke-width=\"0\" stroke=\"white\"/>\n";

###上右
	print SVG "\t<path d=\"M$x2,$y1 h-$r a$r,$r 0 0 1 $r,$r z\" fill=\"white\" stroke-width=\"0\" stroke=\"white\"/>\n";

###中左
	print SVG "\t<path d=\"M$x1,$y2 v$r a$r,$r 0 0 1 $r,-$r a$r,$r 0 0 1 -$r,-$r z\" fill=\"white\" stroke-width=\"0\" stroke=\"white\"/>\n";

###中右
	print SVG "\t<path d=\"M$x2,$y2 v-$r a$r,$r 0 0 1 -$r,$r a$r,$r 0 0 1 $r,$r z\" fill=\"white\" stroke-width=\"0\" stroke=\"white\"/>\n";

###下左
#	print SVG "\t<path d=\"M$x1,$y3 h$r a$r,$r 0 0 1 -$r,-$r z\" fill=\"white\" stroke-width=\"0\" stroke=\"white\"/>\n";
	print SVG "\t<path d=\"M$x1,",$y3+3," h$r v-3 a$r,$r 0 0 1 -$r,-$r z\" fill=\"white\" stroke-width=\"0\" stroke=\"white\"/>\n";

###下右
#	print SVG "\t<path d=\"M$x2,$y3 v-$r a$r,$r 0 0 1 -$r,$r z\" fill=\"white\" stroke-width=\"0\" stroke=\"white\"/>\n";
	print SVG "\t<path d=\"M$x2,",$y3+1," v-",$r+1," a$r,$r 0 0 1 -$r,$r v1 z\" fill=\"white\" stroke-width=\"0\" stroke=\"white\"/>\n";
}

sub decimal{
	return sprintf("%.".$_[1]."f",$_[0]);
}
